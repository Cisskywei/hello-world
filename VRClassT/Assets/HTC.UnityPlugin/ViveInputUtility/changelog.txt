# Vive Input Utility for Unity - v1.6.4
Copyright (c) 2016-2017, HTC Corporation. All rights reserved.


## Changes for v1.6.4:

* Resloves tracking pose not updating in Unity 5.6

* Add SnapOnEnable option to ViveRigidPoseTracker component

* Add mouse button mapping options to ViveRaycaster component

* Fix crashes when clicking dropdown UI in RoleBindingExample scene

* Fix auto-bake-lightmap errors in example scenes

* Correct rigidbody null check in Draggable and Grabbable scripts


## Changes for v1.6.3:

* Fix ViveRoleProperty returns wrong type & value [issue#9](https://github.com/ViveSoftware/ViveInputUtility-Unity/issues/9)

* Now Teleportable component will find target & pivot automatically [issue#8](https://github.com/ViveSoftware/ViveInputUtility-Unity/issues/8)

* Remove warning in LineRenderer


## Changes for v1.6.2:

* Fix remapping errors from HandRoleHandler [issue#1](https://github.com/ViveSoftware/ViveInputUtility-Unity/issues/1)

* Fix ViveRoleProperty.ToRole always returns Invalid [issue#6](https://github.com/ViveSoftware/ViveInputUtility-Unity/issues/6)

* Fix ViveRaycaster not working when app loses focus [issue#7](https://github.com/ViveSoftware/ViveInputUtility-Unity/issues/7)


## Changes for v1.6.0:

* New ViveRole System
    - ViveRole is a mapping system that relate logic roles to OpenVR device indices.
    - Each role has their own auto-mapping logic, and binding API allow user to customize the relation.
        - Both mapping (role, device index) binding (role, device serial number) are one-on-one relation
        - When a device serial number is binding to a role, it means that role is always mapping to the specific device
        - If the bound device is disconnected, the bound role will not mapping to any device index (invalid).
    - Currently there are 4 built-in roles:
        - DeviceRole: role that mapping to all 16 devices, ordered exactly same as device index.
        - HandRole: role related to standard Vive controllers, with basic RightHand/LeftHand recognition.
        - TrackerRole: role related to Vive trackers, first conntected tracker will be mapping to Tracker1.
        - BodyRole: role related to devices that tracking human limbs.
    - Creating custom role in an instant by adding ViveRoleEnumAttribute to your enum type
    - Customizing auto-mapping logic by implementing ViveRoleHandler\<EnumType\> and call ViveRole.AssignMapHandler()

* New query APIs that accept any ViveRoles, ex.
    - Use ViveRole.GetDeviceIndexEx(TrackerRole.Tracker1) to get tracker's device index.
    - Use VivePose.GetPoseEx(TrackerRole.Tracker1) to get tracker's tracking data
    - Use ViveInput.GetPressEx(TrackerRole.Tracker1, ControllerButton.Trigger) to get tracker's trigger event.
    - Use ViveInput.AddListenerEx(TrackerRole.Tracker1, ControllerButton.Trigger, ButtonEventType.Press) to listen tracker's trigger event.

* New sample scene "RoleBindingExample"
    - This sample scene demonstrate how to bind device a role and save/load those bindings

* New ViveRoleBindingsHelper helper component
    - Adding this component to scene to auto-load bindings.
    - Call function SaveRoleBindings(filePath) to save bindings manually.
    - Call function LoadRoleBindings(filePath) to load bindings manually.

* New RenderModelHook helper component
    - This script creates and handles SteamVR_RenderModel, so you can show render model specified by ViveRole insdead of device index.

* New ExternalCameraHook helper component
    - This script creates and handles SteamVR_ExternalCamera, and let camera tracking device specified by ViveRole insdead of device index.
    - Setup step-by-step
	1. Add a file called externalcamera.cfg in the root of your project. (the config file sample can be found [here](https://steamcommunity.com/app/358720/discussions/0/405694031549662100/))
    2. Add ExternalCameraHook component into your scene. (don't remove the auto-generated SteamVR_Render component)
	3. Select ExternalCameraHook gameobject and set the device role in inspector. (or set in script, ex. ExternalCameraHook.viveRole.SetEx(TrackerRole.Tracker1))
          - If you are using 3rd Vive standard controller as external camera, set to HandRole.Controller3 (recommended)
	    - If you are using ViveTracker as external camera, set to TrackerRole.Tracker1 (recommended)
    4. (Optional) Bind the external camera tracking device to the role
	    1. Open "RoleBindingExample" scene
	    2. Scan the specific device (for external camera)
	    3. Bind to the specific role (ex. HandRole.Controller3 or TrackerRole.Tracker1)
	    4. Save bindings
	    5. Back to your project scene
	    6. Add ViveRoleBindingsHelper component into your scene. (to load bindings automatically)
	    7. Now external camera should always tracking at the device you wanted.


## Changes for v1.5.3:

* Make compatible with SteamVR plugin 1.2.1
* Fix a bug in ColliderEventCaster that cause crash when disabling event caster and handling events at the same time.
* Change default teleportButton in Teleportable to TeleportButton.Pad instead of TeleportButton.Trigger
* Containers optimize
    - Re-write IndexedTable, should be more efficient
    - Add read-only interface


## Changes for v1.5.2:

* Make compatible with SteamVR plugin 1.2.0


## Changes for v1.5.1:

* Update guide document
    - Reveal used namespace in some example scripts.
    - Add ready-to-used component list.

* New controllers prefab that handles both hand EventRaycaster, ColliderEventCaster, guidelines and models
    - Hide controllers' models when grabbing or dragging
    - Enable EventRaycaster on pad touched, otherwise enable ColliderEventCaster

* Pointer3D
    - Expose Pointer3DRaycaster at Pointer3DEventData.raycaster, to get Raycaster from eventData easily.
    - Move dragThreshold and clickInterval settings from Pointer3DInputModule to Pointer3DRaycaster.
    - Re-design RaySegmentGenerator. Now RaycastMode setting is replaced by applying ProjectionGenerator & ProjectileGenerator component with Pointer3DRaycaster.
    Add or enable only one generator at a time, or which generator used by the raycaster is unexpected.
    Also customize your own generators by implementing BaseRaySegmentGenerator.

* ColliderEvent
    - Now OnColliderEventClick won't invoke if caster has leaved the pressed object.
    - Fix a bug in ColliderEventCaster that doesn't handle hovered colliders correctly.
    - Fix a bug that ColliderEventCaster doesn't handle event correctly when disable.
    - Add ColliderEventTrigger component, work just like built-in EventTrigger


* Add Pointer3DEventData extensions
```csharp
      Pointer3DRaycaster PointerEventData.GetRaycaster3D()
	                bool PointerEventData.TryGetRaycaster3D(out Pointer3DRaycaster raycaster)
	        TRaycaster3D PointerEventData.GetRaycaster3D<TRaycaster3D>()
	                bool PointerEventData.TryGetRaycaster3D<TRaycaster3D>(out TRaycaster3D raycaster)
```

* Add ColliderEventData extensions
```csharp
            TEventCaster ColliderEventData.GetEventCaster<TEventCaster>()
	                bool ColliderEventData.TryGetEventCaster<TEventCaster>(out TEventCaster eventCaster)
```

* Add VivePointerEventData extensions
```csharp
                    bool PointerEventData.IsViveButton(HandRole hand)
                    bool PointerEventData.IsViveButton(ControllerButton button)
                    bool PointerEventData.IsViveButton(HandRole hand, ControllerButton button)
	                bool PointerEventData.TryGetViveButtonEventData(out VivePointerEventData viveEventData)
```

* Add ViveColliderEventData extensions
```csharp
                    bool ColliderEventData.IsViveButton(HandRole hand)
                    bool ColliderEventData.IsViveButton(ControllerButton button)
                    bool ColliderEventData.IsViveButton(HandRole hand, ControllerButton button)
                    bool ColliderEventData.TryGetViveButtonEventData(out ViveColliderButtonEventData viveEventData)
                    bool ColliderAxisEventData.IsViveTriggerValue()
                    bool ColliderAxisEventData.IsViveTriggerValue(HandRole hand)
                    bool ColliderAxisEventData.TryGetViveTriggerValueEventData(out ViveColliderTriggerValueEventData viveEventData)
                    bool ColliderAxisEventData.IsVivePadAxis()
                    bool ColliderAxisEventData.IsVivePadAxis(HandRole hand)
                    bool ColliderAxisEventData.TryGetVivePadAxisEventData(out ViveColliderPadAxisEventData viveEventData)
```

* Improve BasicGrabbable component, and Draggable(in 3D Drag example) as well
    - Now grabbed object can collide properly into other colliders.
    - Now handles multiple grabbers.
    - Add speed factor parameter to adjast grabbed object following speed.
    - Add afterGrabbed & beforeRelease event handler.

* Add dragging state material in MaterialChanger.

* Fix a bug in Teleportable so that GuideLineDrawer won't draw in wrong position.

* New containers in Utiliy
```csharp
    IndexedSet<TKey>                  // container that combinds set and list, order is not preserved, removing complexity is O(1)
    OrderedIndexedSet<TKey>           // container that combinds set and list, order is preserved, removing complexity is O(N)
    IndexedTable<TKey, TValue>        // container that combinds dictionary and list, order is not preserved, removing complexity is O(1)
    OrderedIndexedTable<TKey, TValue> // container that combinds dictionary and list, order is preserved, removing complexity is O(N)
```


## Changes for v1.5.0:

* Add new raycast mode for Pointer3DRaycaster
    - Default : one simple raycast
    - Projection : raycast in a constant distance then raycast toward gravity
    - Projectile : raycast multiple times alone the projectile curve using initial velocity 

* Add ViveInput.GetCurrentRawControllerState and ViveInput.GetPreviousRawControllerState.

* BaseRaycastMethod now registered into Pointer3DRaycaster at Start instead of Awake.

* Remove RequireComponent(typeof(BaseMultiMethodRaycaster)) attribute from BaseRaycastMethod.

* Pointer3DRaycaster now registered into Pointer3DInputModule at Start instead of Awake.

* EventCamera for Pointer3DRaycaster now place at root, instead of child of Pointer3DRaycaster.

* New ColliderEventSyatem. Hover thins using collider (instead of raycast), send button events to them, handle events by EventSystem-like handlers.
    - IColliderEventHoverEnterHandler
    - IColliderEventHoverExitHandler
    - IColliderEventPressDownHandler
    - IColliderEventPressUpHandler
    - IColliderEventPressEnterHandler
    - IColliderEventPressExitHandler
    - IColliderEventClickHandler
    - IColliderEventDragStartHandler
    - IColliderEventDragUpdateHandler
    - IColliderEventDragEndHandler
    - IColliderEventDropHandler
    - IColliderEventAxisChangeHandler

* New example scene to demonstrate how ColliderEvent works.
    - Assets\HTC.UnityPlugin\ViveInputUtility\Examples\5.ColliderEvent\ColliderEvent.unity

* Update tutorial & guide document.


## Changes for v1.4.7:

* Now HandRole defines more then 2 controllers.

* Add some comment and description to public API.


## Changes for v1.4.6:

* Fix a bug in the examples, now reticle posed correctly when scaling VROrigin.


## Changes for v1.4.5:

* Fix a rare issue in Pointer3DInputModule when processing event raycast.


## Changes for v1.4.4:

* Remove example 5 & 6 from package for release(still available in full package), since they are not good standard practices in VR for avoiding motion sickness by moving the player.

* Reset pointer's tranform(to align default laser pointer direction) in examples.

* Adjust default threshold to proper value in PoseStablizer & Pointer3DInputModule.

* Fix a bug in Pointer3DRaycaster that causes other input module to drive Pointer3DRaycaster(witch should be only driven by Poinster3DInputModule).

* Now Pointer3DRaycaster can optionally show event raycast line in editor for debugging.

* Add step by step tutorial document and example scene.

* Replace about document with developer guide.


## Changes for v1.4.3:

* Update usage document(rewrite sample code).

* Add copyright terms.

* Define new controller button : FullTrigger(consider pressed only when trigger value is 1.0).

* Fix ViveInput.GetPadPressDelta and ViveInput.GetPadTouchDelta to work properly.

* Add scroll delta scale property for ViveRaycaster(to adjust scrolling sensitivity).

* Add PoseEaser effect settings and PoseEaserEditor to show properties.

* Add ViveInput.TriggerHapticPulse for triggering controller vibration.


## Changes for v1.4.2:

* Update usage document.

* Reorder parameters in Pose.SetPose.

* Now click interval can be configured by setting ViveInput.clickInterval.


## Changes for v1.4.1:

* Fix wrong initial status for ViveRole and ViveInput.

* Example: showLocalAvatar (property for LANGamePlayer) won't hide shadow (hide mesh only) if set to false.


## Changes for v1.4.0:

* Separate PoseTracker module from VivePose.

* New tracking effect PoseFreezer.

* Reorganize folders.


## Changes for v1.3.0:

* VivePose is now pure static class (Since Unity 5.3.5 fixed issue with double rendering of canvas on Vive VR, PoseUpdateMode is no longer needed).

* New components CanvasRaycastMethod and CanvasRaycastTarget.
    - CanvasRaycastMethod works like GraphicRaycastMethod, but use CanvasRaycastTarget component to target canvases, instead of asigning canvas property once at a time.


## Changes for v1.2.0:

* Fix misspelling from ConvertRoleExtention to ConvertRoleExtension

* New containter class IndexedSet\<T\>

* New class ObjectPool\<T\> and relative class ListPool\<T\>, DictionaryPool\<T\>, IndexedSetPool\<T\>, to reduce allocating new containers.

* Change some data structure from LinkList to InedexedSet (VivePose, Pointer3DInputModule, BaseMultiMethodRaycaster, BaseVivePoseTracker).

* Rewrite GraphicRaycastMethod to align GraphicRaycaster's behaviour.


## Changes for v1.1.0:

* New API VivePose.SetPose().

* New API VivePose.GetVelocity().

* New API VivePose.GetAngularVelocity().

* Fix some null reference in VivePose.